{"version":3,"sources":["components/header/Header.tsx","components/utils/FileUtils.ts","components/utils/StringUtils.ts","components/utils/LangUtils.ts","components/content/FileUploadComponent.tsx","components/content/CodeBlockComponent.tsx","components/content/LanguageButton.tsx","components/content/LanguageSelectComponent.tsx","components/content/ErrorMsgComponent.tsx","components/content/ContentComponent.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","className","React","Component","FileUtils","file","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsBinaryString","StringUtils","jsonArray","LangUtils","translateText","language","textToTranslate","url","fetch","method","headers","Accept","FileUploadComponent","id","type","onChange","this","props","onFileSelect","accept","multiple","htmlFor","PureComponent","CodeBlockComponent","SyntaxHighlighter","registerLanguage","xml","style","width","overflow","textAlign","showLineNumbers","androidstudio","customStyle","height","code","progress","ProgressBar","now","LanguageButton","onClick","_","handler","languageCode","isSelected","name","languageName","LanguageSelectComponent","rowSize","lang2DArray","arrayLength","languageArray","length","rowIndex","colIndex","i","undefined","content","map","langArr","renderRow","Container","languages","getLanguageButton","Row","key","selectLanguageHandler","selectedLanguageCode","ErrorMsgComponent","errorMsg","ContentComponent","translatedXmlString","translatedString","onLanguageChange","setState","startTranslation","state","getFileFromInput","then","binary","jsonObj","JSON","parse","xml2json","compact","inputText","translatedText","translationProgress","arrSize","resources","string","forEach","element","_attributes","translatable","push","_text","value","json","data","translations","json2xml","getXmlTree","stringify","spaces","translationComplete","percent","onFileInput","event","persist","target","files","err","Blob","href","URL","createObjectURL","download","Button","App","adId","process","ADSENSE_PUD_ID","data-ad-client","async","src","data-ribbon","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.419139ce.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h1>Anuvaad</h1>\r\n                <p className=\"lead text-muted\">Localize your app in global languages</p>\r\n            </div>\r\n        );\r\n    }\r\n}","export default class FileUtils {\r\n\r\n    public static getFileFromInput(file: File): Promise<any> {\r\n        return new Promise(function (resolve, reject) {\r\n            const reader = new FileReader();\r\n            reader.onerror = reject;\r\n            reader.onload = function () { resolve(reader.result); };\r\n            reader.readAsBinaryString(file); // here the file can be read in different way Text, DataUrl, ArrayBuffer\r\n        });\r\n    }\r\n}","\r\n\r\nexport default class StringUtils {\r\n\r\n    \r\n    public static getXmlTree(jsonArray: string): string {\r\n        return \"{\\\"resources\\\": {\\\"string\\\":\" + jsonArray + \"}}\";\r\n    }\r\n}\r\n","export default class LangUtils {\r\n\r\n    public static translateText = (language:string, textToTranslate: string): Promise<Response> => {\r\n        const apiKey = process.env.REACT_APP_LANG_TRANSLATION_API_KEY;          // server key\r\n        // const apiKey = process.env.REACT_APP_GITHUB_TRANSLATION_KEY;         // local key\r\n        let url = \"https://translation.googleapis.com/language/translate/v2?key=\" + apiKey + \"&target=\" + language;\r\n        url += \"&q=\" + textToTranslate;\r\n        return fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\"\r\n            }\r\n        });\r\n    }\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\n\r\n\r\ninterface FileUploadProps {\r\n    onFileSelect: (event: ChangeEvent<HTMLInputElement>)=> void\r\n}\r\n\r\nexport default class FileUploadComponent extends React.PureComponent<FileUploadProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"custom-file left-align alert alert-info\">\r\n            <input id=\"logo\" type=\"file\" className=\"custom-file-input\" onChange={this.props.onFileSelect} accept=\".xml\" multiple={false} />\r\n            <label htmlFor=\"logo\" className=\"custom-file-label text-truncate\">Select strings.xml file</label>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}","\r\nimport React from 'react';\r\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport xml from 'react-syntax-highlighter/dist/esm/languages/hljs/xml';\r\n\r\nimport { androidstudio } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\ninterface CodeBlockProps {\r\n    code: string,\r\n    progress?: number\r\n}\r\n\r\nexport default class CodeBlockComponent extends React.Component<CodeBlockProps> {\r\n    constructor(props: CodeBlockProps) {\r\n        super(props);\r\n        SyntaxHighlighter.registerLanguage('xml', xml);\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"col-sm\" style={{ width: 520, overflow: 'auto', textAlign: 'left' }}>\r\n                <SyntaxHighlighter\r\n                    language=\"xml\"\r\n                    showLineNumbers={true}\r\n                    style={androidstudio}\r\n                    customStyle={{ height: 400 }}>\r\n                    {this.props.code}\r\n                </SyntaxHighlighter>{\r\n                    this.props.progress && <ProgressBar now={this.props.progress} />\r\n                }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}  ","import React from 'react';\r\n\r\nexport interface LanguageProps {\r\n    handler: (languageCode: string) => void,\r\n    languageName: string,\r\n    isSelected: boolean,\r\n    languageCode: string\r\n\r\n}\r\n\r\nexport default class LanguageButton extends React.PureComponent<LanguageProps> {\r\n\r\n    render(): JSX.Element {\r\n\r\n        let className = \"btn btn-link col-sm\";\r\n        if (this.props.isSelected) {\r\n            className = \"btn btn-success col-sm\";\r\n        }\r\n        \r\n        return (\r\n            <button className={className} name={this.props.languageName} onClick={this.onClick}>\r\n                {this.props.languageName}\r\n            </button>\r\n        );\r\n        \r\n    }\r\n\r\n    onClick = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n        this.props.handler(this.props.languageCode);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport LanguageButton from './LanguageButton';\r\nimport Language from '../../models/Language';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\ninterface LanguageSelectProps {\r\n    selectedLanguageCode: string,\r\n    selectLanguageHandler: (languageCode: string) => void,\r\n    languageArray: Language[]\r\n}\r\n\r\nexport default class LanguageSelectComponent extends React.Component<LanguageSelectProps> {\r\n\r\n    rowSize = 4;\r\n    lang2DArray: Language[][];\r\n\r\n    constructor(props: LanguageSelectProps) {\r\n        super(props);\r\n\r\n        this.lang2DArray = [];\r\n\r\n        const arrayLength = props.languageArray.length;\r\n\r\n        let rowIndex = 0;\r\n        let colIndex = 0;\r\n        for (let i = 0; i < arrayLength; i++) {\r\n            if (this.lang2DArray[rowIndex] === undefined) {\r\n                this.lang2DArray[rowIndex] = [];\r\n            }\r\n            this.lang2DArray[rowIndex][colIndex] = props.languageArray[i] as Language;\r\n\r\n            if (this.lang2DArray[rowIndex].length === this.rowSize) {\r\n                colIndex = 0;\r\n                rowIndex++;\r\n            } else {\r\n                colIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const content = this.lang2DArray.map((langArr: Language[]) => \r\n            this.renderRow(langArr)\r\n        );\r\n\r\n        return (\r\n            <Container>\r\n                {content} \r\n            </Container>\r\n        );\r\n\r\n    }\r\n\r\n    renderRow(langArr: Language[]): JSX.Element {\r\n\r\n        const languages = langArr.map((language: Language) =>\r\n            this.getLanguageButton(language)\r\n        );\r\n\r\n        return (\r\n            <Row>\r\n                {languages}\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    getLanguageButton(language: Language): JSX.Element {\r\n        return (\r\n            <LanguageButton\r\n                key={language.code}\r\n                languageCode={language.code}\r\n                languageName={language.name}\r\n                handler={this.props.selectLanguageHandler}\r\n                isSelected={this.props.selectedLanguageCode === language.code} />\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\ninterface ErrorProps {\r\n    errorMsg?: string\r\n}\r\n\r\nexport default class ErrorMsgComponent extends React.Component<ErrorProps> {\r\n\r\n    render() {\r\n\r\n        if (!this.props.errorMsg) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"alert alert-warning alert\">\r\n                {this.props.errorMsg}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { json2xml, xml2json } from 'xml-js';\r\nimport XmlString from '../../models/XmlString';\r\nimport FileUtils from '../utils/FileUtils';\r\nimport StringUtils from '../utils/StringUtils';\r\nimport LangUtils from '../utils/LangUtils';\r\nimport FileUploadComponent from './FileUploadComponent';\r\nimport CodeBlockComponent from './CodeBlockComponent';\r\nimport LanguageSelectComponent from './LanguageSelectComponent';\r\nimport Language from '../../models/Language';\r\nimport ErrorMsgComponent from './ErrorMsgComponent';\r\n\r\ninterface ContentProps {\r\n    languageArray: Language[]\r\n}\r\n\r\ninterface ContentState {\r\n    inputText: string,\r\n    translatedText: string,\r\n    language: string,\r\n    file?: File,\r\n    errorMsg?: string | undefined,\r\n    translationComplete: boolean,\r\n    translationProgress?: number\r\n}\r\n\r\nexport default class ContentComponent extends React.Component<ContentProps, ContentState> {\r\n\r\n    private translatedXmlString: XmlString[];\r\n    private translatedString: string;\r\n\r\n    constructor(props: ContentProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputText: \"Select your Strings.xml file from resources\",\r\n            translatedText: \"Hit 'Translate' to start\",\r\n            language: \"es\",\r\n            translationComplete: false\r\n        };\r\n        this.translatedXmlString = [];\r\n        this.translatedString =\"\";\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        let file;\r\n        if (this.state.translationComplete) {\r\n            file = new Blob([this.state.translatedText], { type: 'text/xml' });\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <FileUploadComponent onFileSelect={this.onFileInput} />\r\n\r\n                <div>\r\n                    <ErrorMsgComponent errorMsg={this.state.errorMsg} />\r\n                </div>\r\n\r\n                {this.state.translationComplete &&\r\n                    <div className=\"alert alert-success alert\">\r\n                        String.xml generated successfully. <a href={URL.createObjectURL(file)} download=\"strings.xml\" >Download </a>\r\n                    </div>\r\n                }\r\n\r\n                <div className=\"container pt-md-3 pb-md-3 mx-auto\">\r\n                    <div className=\"row\">\r\n                        <CodeBlockComponent code={this.state.inputText} />\r\n                        <CodeBlockComponent code={this.state.translatedText} progress={this.state.translationProgress} />\r\n                    </div>\r\n                </div>\r\n                <LanguageSelectComponent\r\n                    selectedLanguageCode={this.state.language}\r\n                    languageArray={this.props.languageArray}\r\n                    selectLanguageHandler={this.onLanguageChange} />\r\n\r\n                <div className=\"row pt-md-4\">\r\n                    <Button className=\"col-sm\" onClick={this.startTranslation} name=\"Click Me\">Translate</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onLanguageChange = (language: string): void => {\r\n        this.setState({ language: language });\r\n    }\r\n\r\n    private startTranslation = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n\r\n        if (this.state.file) {\r\n            this.translatedXmlString = [];\r\n            FileUtils.getFileFromInput(this.state.file).then((binary) => {\r\n                const jsonObj = JSON.parse(xml2json(binary, { compact: true }));\r\n                this.setState({\r\n                    inputText: binary,\r\n                    errorMsg: undefined,\r\n                    translatedText: \".....\",\r\n                    translationProgress: undefined\r\n                })\r\n\r\n                const arrSize = jsonObj.resources.string.length;\r\n\r\n                jsonObj.resources.string.forEach((element: XmlString) => {\r\n                    if (!element._attributes.translatable) {\r\n                        const translatedText = LangUtils.translateText(this.state.language, element._text);\r\n                        translatedText.then((value: Response) => {\r\n                            value.json().then(value => {\r\n                                if (value.data?.translations[0]) {\r\n                                    element._text = value.data.translations[0].translatedText;\r\n                                    this.translatedXmlString.push(element);\r\n                                    this.translatedString = json2xml(StringUtils.getXmlTree(JSON.stringify(this.translatedXmlString)), { compact: true, spaces: 4 });\r\n                                    if (this.translatedXmlString.length === arrSize - 2) {\r\n                                        this.setState({\r\n                                            translatedText: this.translatedString,\r\n                                            translationComplete: true\r\n                                        })\r\n                                    } else {\r\n                                        const percent = (this.translatedXmlString.length / arrSize * 100);\r\n                                        \r\n                                        this.setState({\r\n                                            translationProgress: percent\r\n                                        });\r\n                                    }\r\n                                } else {\r\n                                    this.setState({\r\n                                        errorMsg: \"Something went wrong, please try again.\"\r\n                                    });\r\n                                    return;\r\n                                }\r\n                            });\r\n                        });\r\n                    } else {\r\n                        this.translatedXmlString.push(element);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            this.setState({\r\n                errorMsg: \"Please select a file\"\r\n            });\r\n        }\r\n    }\r\n\r\n    private onFileInput = (event: ChangeEvent<HTMLInputElement>): void => {\r\n\r\n        event.persist();\r\n\r\n        if (event.target.files) {\r\n            const file: File = event.target.files[0];\r\n\r\n            FileUtils.getFileFromInput(file).then((binary) => {\r\n                try {\r\n                    this.setState({\r\n                        file: file,\r\n                        inputText: binary\r\n                    });\r\n                } catch (err) {\r\n                    this.setState({\r\n                        errorMsg: \"Please select a valid XML. \" + err\r\n                    })\r\n                }\r\n\r\n            });\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/header/Header';\r\nimport ContentComponent from './components/content/ContentComponent';\r\nimport Language from './models/Language';\r\n\r\nconst languageArray: Language[] = [\r\n  {\r\n    name: 'Hindi (हिन्दी)',\r\n    code: 'hi'\r\n  }, {\r\n    name: 'Spanish (español)',\r\n    code: 'es'\r\n  }, {\r\n    name: 'Chinese (Zhōngwén)',\r\n    code: 'zh'\r\n  }, {\r\n    name: 'Arabic (اَلْعَرَبِيَّةُ)',\r\n    code: 'ar'\r\n  }, {\r\n    name: 'Russian (русский язык)',\r\n    code: 'ru'\r\n  }, {\r\n    name: 'German (Deutsch)',\r\n    code: 'de'\r\n  }, {\r\n    name: 'Portugese (português)',\r\n    code: 'pt'\r\n  }\r\n]\r\n\r\nfunction App(): JSX.Element {\r\n  const adId = process.env.ADSENSE_PUD_ID;\r\n  return (\r\n    <div className=\"App\">\r\n      <script data-ad-client={adId} async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n      <a className=\"github-fork-ribbon\" href=\"http://github.com/swapnil1104/ReactAnuvaad\" data-ribbon=\"Star on GitHub\" title=\"Star on GitHub\">Star on GitHub</a>\r\n      <Header />\r\n      <ContentComponent languageArray={languageArray} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}